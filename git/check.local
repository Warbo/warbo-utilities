#! /usr/bin/env nix-shell
#! nix-shell -i bash -p bash git2html parallel

echo "Putting hooks in place"
for repo in *.git
do
    HOOK="$repo/hooks/post-receive"
    # This should be a symlink to post-receive.hook, or otherwise run it
    if [ -h "$HOOK" ]
    then
        true  # OK
    elif [ -f "$HOOK" ]
    then
        grep 'post-receive.hook' < "$HOOK" > /dev/null ||
            echo "$HOOK should run ../post-receive.hook (or symlink to it)" 1>&2
    else
        (cd "$repo/hooks" && ln -s ../../post-receive.hook post-receive)
    fi
done

echo "Checking connection to chriswarbo.net"
if ssh -q chriswarbo.net exit
then
    echo "Copying repos to chriswarbo.net"
    REMOTE=$(ssh chriswarbo.net "ls /opt/repos/")
    for repo in *.git
    do
        if ! echo "$REMOTE" | grep "^$repo$" > /dev/null
        then
            echo "Can't find $repo on remote server, copying..."
            tar c "$repo" | gzip - | ssh chriswarbo.net "cd /opt/repos; tar xz"
        fi
    done
fi

for repo in *.git
do
    pushd "$repo" > /dev/null || exit 1
    git config --get remote.origin.fetch && {
        echo "Removing fetch refs from '$repo'" >> /dev/stderr
        git config --unset remote.origin.fetch
    }

    git config --get remote.origin.mirror && {
        echo "Removing mirror status of '$repo'" >> /dev/stderr
        git config --unset remote.origin.mirror
    }
    popd > /dev/null || exit 1
done

# Since these hooks will try pushing changes to remote repos, even if there are
# no changes it can still take a long time to wait for all of the connections to
# be established.
# By running in parallel, these waiting times can be overlapped, resulting in
# less idle time.
# However, we don't want to abuse remote services by attempting hundreds of
# simultaneous connections, so rather than forking with `&` we use `sem` from
# GNU parallel to prevent more than 8 tasks from running at once.
echo "Running hooks in parallel"

nix-shell -p parallel -p bash --run bash << 'EOF'
for repo in *.git
do
    pushd "$repo" > /dev/null
    chmod +x hooks/post-receive
    sem --will-cite -j 8 sh hooks/post-receive
    popd > /dev/null
done
sem --will-cite --wait
EOF

echo "Running checks on remote"
ssh chriswarbo.net 'cd /opt/repos; sh check.sh'
