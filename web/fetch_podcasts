#!/usr/bin/env bash
set -e
shopt -s nullglob

function norm {
    # Strip non-alphanumeric and convert to lowercase
    tr '[:upper:]' '[:lower:]' | tr -dc '[:alnum:]'
}

POSSIBILITIES=""
for POSSIBLE in ~/Audio/Non-fiction/*
do
    POSSIBILITIES=$(printf '%s\n%s' "$POSSIBILITIES" "$POSSIBLE")
done
POSSIBILITIES=$(echo "$POSSIBILITIES" | grep '^.')

echo "Looking for BBC podcasts in ~/Mail/feeds" 1>&2

FEEDS=()
while read -r FEED
do
    FEEDS+=("$FEED")
done < "$HOME/.podcasts"

for D in "${FEEDS[@]}"
do
    echo "Checking for $D" 1>&2
    DIR="$HOME/Mail/feeds/$D/new"
    [[ -d "$DIR" ]] || {
        echo "Not a directory '$DIR', skipping" 1>&2
        continue
    }
    ANY=0
    for F in "$DIR"/*
    do
        ANY=1
    done
    [[ "$ANY" -eq 1 ]] || continue

    GUESSTINATION=""
    while read -r POSSIBLE
    do
        NORM_POSS=$(basename "$POSSIBLE" | norm)
        NORM_D=$(echo "$D" | norm)
        if echo "$NORM_POSS" | grep -F "$NORM_D"    > /dev/null
           # || echo "$NORM_D"    | grep -F "$NORM_POSS" > /dev/null
        then
            [[ -z "$GUESSTINATION" ]] || {
                echo "'$D' could be '$GUESSTINATION' or '$POSSIBLE', skip" 1>&2
                exit 1
            }
            GUESSTINATION=$(basename "$POSSIBLE")
        fi
    done < <(echo "$POSSIBILITIES")
    [[ -n "$GUESSTINATION" ]] || {
        echo "Couldn't guess a destination for '$D', skipping" 1>&2
        continue
    }

    for F in "$DIR"/*
    do
        echo "Guessing that '$D' should go in '$GUESSTINATION'" 1>&2
        URL=""
        URL=$(grep -F 'Link: http' < "$F" | grep -o 'http.*') || true
        [[ -n "$URL" ]] || {
            echo "No URL found in '$F', skipping" 1>&2
            continue
        }

        mkdir -p "$HOME/Audio/TODO/$GUESSTINATION"
        inDir "$HOME/Audio/TODO/$GUESSTINATION" get_bbc_podcast "$URL"

        markRead "$F"
    done
done
echo "Done with BBC podcasts" 1>&2

function getFromSrc {
    # A hopefully generic podcast fetcher

    # Grab our in and out directories from the first two arguments, then shift
    # them off to leave an arbitrary number of grep patterns
     IN="$1"
    OUT="$2"
    shift
    shift
    echo "Looking for $OUT podcasts" 1>&2

    # Look for entries in the given dir
    for F in "$HOME/Mail/feeds/$IN/new"/*
    do
        # Grab the source of the first Web link
        PAGE=$(grep -o 'http[s]*://[^ "]*' < "$F" | head -n1) || continue
        echo "Found link $PAGE" 1>&2

        if echo "$PAGE" | grep -i '\.mp3$' > /dev/null
        then
            echo "Assuming URL '$PAGE' is the file rather than a Web page" 1>&2
            URL="$PAGE"
        else
            URL=$(wget -q -O- "$PAGE")

            # Narrow down the page source to a URL using the remaining arguments as
            # patterns for 'grep -o', applied one after the other (then apply head)
            FOUND=1
            for PAT in "$@"
            do
                URL=$(echo "$URL" | grep -o "$PAT") || FOUND=0
            done
            [[ "$FOUND" -eq 1 ]] || continue
            URL=$(echo "$URL" | head -n1)
        fi

        # Skip if we didn't get anything (e.g. not a podcast)
        [[ -n "$URL" ]] || continue
        echo "Found URL $URL" 1>&2

        # Create and enter the output dir
        mkdir -p "$HOME/Audio/TODO/$OUT"
        pushd "$HOME/Audio/TODO/$OUT"

          # Avoid hammering a site with too many requests
          sleep 2

          # Fetch the extracted file; use -c to resume previous attempts
          wget -c "$URL"

          # Remove any extra suffices from the file name (might as well do all)
          for GOT in *.mp3*
          do
              NAME=$(basename "$GOT")

              # Skip those which are already .mp3
              echo "$NAME" | grep -i '\.mp3$' > /dev/null && continue

              TRIMMED=$(echo "$NAME" | grep -o '^.*\.mp3')

              echo "Renaming dodgy-looking '$NAME' to '$TRIMMED'" 1>&2
              mv -v "$NAME" "$TRIMMED"
          done
        popd

        markRead "$F"
    done
}

# Read each line into the array ENTRY, with tab-separated elements
while IFS=$'\t' read -r -a ENTRY
do
    getFromSrc "${ENTRY[@]}"
done < <(grep -v '^ *#' < ~/.podcast_extractors)
