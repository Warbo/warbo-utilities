#!/usr/bin/env bash
set -e

# shellcheck disable=SC2154
[[ -n "$fold"          ]] ||
    fail "No 'fold' command given (should be fold-unbuffered)"
# shellcheck disable=SC2154
[[ -n "$wrappedExpect" ]] ||
    fail "'wrappedExpect' should be path to wrappedShell.expect"

# This script starts up a bash shell, passing along any arguments we've been
# given. The output of that shell is piped through (our patched version of) the
# 'fold' program from GNU coreutils, which inserts linebreaks to avoid very long
# lines. Using a pipe breaks bash's interactive mode, which we fix by launching
# it with 'expect'.

# This script was created for use with Emacs's shell-mode, since commands can
# easily produce many MB of output containing very long lines, which cause Emacs
# to grind to a halt. An earlier attempt to mitigate this using an Emacs Lisp
# function worked somewhat, but with very large output would *itself* cause
# Emacs to as it struggled to insert newlines! Since this implementation uses a
# small, zero-allocation C program it should hopefully be robust enough that I
# can finally ignore this problem for good!

# Use 'expect' to set up pty, etc. for bash. If we just launched bash straight
# from this script, it would notice that its stdout is a pipe and not work as an
# interactive shell properly (no job control, etc.). Note that:
#
#  - We can't pipe $wrappedExpect into stdin, since we need to keep that free
#    for our bash interaction.
#  - 'fold-unbuffered' is specifically written to avoid buffering, but the pipe
#    might still buffer. We use 'stdbuf' to prevent that.
# shellcheck disable=SC2016

if [ -t 0 ]
then
    # Stdin is a terminal, run interactively
    expect -f "$wrappedExpect" -- "$@" | stdbuf -i0 -o0 -e0  "$fold"
else
    # Stdin is a pipe; run a shell directly, since stdin is weird in expect
    bash "$@" | stdbuf -i0 -o0 -e0 "$fold"
fi
